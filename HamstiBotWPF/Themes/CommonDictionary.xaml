<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:themes="clr-namespace:TBotHamsti.Themes"
                    xmlns:tCommand="clr-namespace:TBotHamsti.Core" >

    <themes:LeftMarginMultiplierConverter x:Key="LengthConverter" />
    
    <sys:Double x:Key="FontSizeValue">16</sys:Double>
    <sys:Double x:Key="CornerRadiusValue">15</sys:Double>

    <SolidColorBrush x:Key="OrangeColor" Color="#ff8906" />
    <SolidColorBrush x:Key="DarkOrangeColor" Color="#EC7F05" />
    <SolidColorBrush x:Key="GrayColor" Color="#a7a9be" />
    <SolidColorBrush x:Key="WhiteColor" Color="#fffffe" />
    <SolidColorBrush x:Key="BlackColor" Color="#0f0e17" />

    <Style TargetType="Button">
        <Setter Property="Height" Value="35"/>
        <Setter Property="MinWidth" Value="35" />
        <Setter Property="Margin" Value="4, 5" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}"/>
        <Setter Property="Background" Value="{StaticResource OrangeColor}" />
        <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="8" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" >
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="9,4" />
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="#ff8906" 
                                              Direction="225" 
                                              ShadowDepth="5" 
                                              BlurRadius="10"
                                              Opacity="0.35" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="#a7a9be" 
                                              Direction="225" 
                                              ShadowDepth="5" 
                                              BlurRadius="10"
                                              Opacity="0.35" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource GrayColor}" />
                <Setter Property="Foreground" Value="{StaticResource BlackColor}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkOrangeColor}"/>
                <!--<Setter Property="Foreground" Value="{StaticResource WhiteColor}" />-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonLeftMenuStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="Margin" Value="5,7" />
        <Setter Property="Foreground" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource OrangeColor}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderThickness" Value="1.5" />
                <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
                <Setter Property="Foreground" Value="{StaticResource OrangeColor}" />
            </Trigger>
            
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonIconStyle" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" >
                        <ContentPresenter VerticalAlignment="Center" 
                                          HorizontalAlignment="Center" 
                                          SnapsToDevicePixels="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Border" x:Key="BorderStyleCommandGrid">
        <Setter Property="BorderBrush" Value="{DynamicResource ForegroundColor}"/>
        <Setter Property="BorderThickness" Value="0.3,0,0,0" />
    </Style>
    
    <Style TargetType="Canvas" x:Key="CanvasForIcons">
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style TargetType="Canvas" x:Key="CanvasForListIcons" BasedOn="{StaticResource CanvasForIcons}">
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform ScaleX="0.9" ScaleY="0.85" />
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Path">
        <Setter Property="StrokeThickness" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="TextBlockStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
    </Style>

    <Style x:Key="TextBlockMessageStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="24" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
    </Style>

    <Style x:Key="TextBlockHeaderGridStyle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}" >
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="2,4" />
    </Style>

    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="1,0" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="BorderThickness" Value="1.5" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}" />
        <Setter Property="CaretBrush" Value="{StaticResource OrangeColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource OrangeColor}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
        
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="4" />
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
    </Style>

    <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Margin" Value="0, 0, 12, 0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
    </Style>

    <Style TargetType="ListView">
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style TargetType="GridViewColumnHeader">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
        <Setter Property="Margin" Value="0.5" />
        <Setter Property="Padding" Value="10,1" />
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border CornerRadius="2" 
                            SnapsToDevicePixels="True"
                            BorderThickness="{TemplateBinding BorderThickness}"   
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <!--<Border Name="InnerBorder" CornerRadius="1" BorderThickness="1">-->
                            <GridViewRowPresenter Content="{TemplateBinding Content}" />
                            <!--<Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <GridViewRowPresenter Grid.RowSpan="2"   
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"   
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Content="{TemplateBinding Content}" />
                            </Grid>-->
                        <!--</Border>-->
                    </Border>


                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource OrangeColor}" />
                            <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource OrangeColor}" />-->
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ForegroundColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
                            <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource OrangeColor}" />-->
                        </Trigger>
                        <!--<MultiTrigger> 
                <MultiTrigger.Conditions> 
                    <Condition Property="IsSelected" Value="True" /> 
                    <Condition Property="Selector.IsSelectionActive" Value="False" /> 
                </MultiTrigger.Conditions> 
                <Setter Property="Background" Value="{StaticResource ListItemSelectedInactiveFill}" /> 
                <Setter Property="BorderBrush" Value="#FFCFCFCF" /> 
            </MultiTrigger>-->
                        <!--<MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource ListItemSelectedHoverFill}" />
                                <Setter Property="BorderBrush" Value="#FF98DDFB" />
                            </MultiTrigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="SimpleExpanderButtonTemp" 
                     TargetType="{x:Type ToggleButton}" >
        <Border x:Name="ExpanderButtonBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Rectangle Fill="Transparent"
                       Grid.ColumnSpan="2"/>
                <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="DarkGray"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center" />
                <Path x:Name="Sign"
                      Grid.Column="0"
                      Data="M 0,5 H 10 M 5,0 V 10 Z"
                      Stroke="#FF666666"
                      Width="10"
                      Height="10"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5" >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0"/>
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"
                          Grid.Column="1"
                          Margin="4,0,0,0"
                          ContentSource="Content"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!--Change the sign to minus when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" TargetName="Sign" Value="M 0,5 H 10 Z"/>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke"
                        Value="#FF3C7FB1"
                        TargetName="Circle"/>
                <Setter Property="Stroke"
                        Value="#222"
                        TargetName="Sign"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Stroke"
                        Value="#FF526C7B"
                        TargetName="Circle"/>
                <Setter Property="StrokeThickness"
                        Value="1.5"
                        TargetName="Circle"/>
                <Setter Property="Stroke"
                        Value="#FF003366"
                        TargetName="Sign"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    
    
    
    
    <Style x:Key="OrangeSwitchStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayColor}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource OrangeColor}" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeValue}" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <Grid Margin="0,1,0,0"
                              VerticalAlignment="{TemplateBinding VerticalAlignment}">
                            <Border x:Name="BackgroundBorder"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    Width="50"
                                    Height="21" 
                                    CornerRadius="4" />
                            <Border x:Name="slider" 
                                    BorderBrush="#FF939393"
                                    Background="#FFF0F0F0"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    HorizontalAlignment="Left" 
                                    Width="20" 
                                    Height="21" 
                                    CornerRadius="4" />
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                          Margin="10,0,0,0" />

                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Content" Value="No" />
                            <Setter TargetName="slider"
                                    Property="RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Content" Value="Yes" />
                            <Setter TargetName="slider"
                                    Property="RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TranslateTransform X="30" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource GrayColor}" />
                            <Setter Property="Foreground" Value="{DynamicResource GrayColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ITCOMMANDS -->
    <HierarchicalDataTemplate DataType="{x:Type tCommand:BotLevelCommand}" ItemsSource="{Binding CommandsOfLevel}" >
        <StackPanel Orientation="Vertical">
            <StackPanel.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockHeaderGridStyle}" />
                <Style TargetType="Border" BasedOn="{StaticResource BorderStyleCommandGrid}" />
                <themes:LeftMarginMultiplierConverter x:Key="LengthConverter" />
            </StackPanel.Resources>

            <Grid Width="{Binding WidthGrid, Source={StaticResource LengthConverter}}"
                      x:Name="GridBotLevelCommand">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1.1*"/>
                    <ColumnDefinition Width="0.2*"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="{Binding ExampleCommand}" HorizontalAlignment="Stretch" />
                <TextBlock Text="{Binding StatusUser}" Grid.Column="1" Margin="5,4,2,4" HorizontalAlignment="Stretch" />
            </Grid>

            <Border BorderThickness="0,0,0,0.3" 
                        x:Name="HeadersTableBorder"
                        BorderBrush="{DynamicResource ForegroundColor}">
                <Grid Margin="{Binding DefaultMargin, Source={StaticResource LengthConverter}}" 
                                  Width="{Binding WidthGrid, Source={StaticResource LengthConverter}}" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.2*"/>
                        <ColumnDefinition Width="0.8*"/>
                        <ColumnDefinition Width="0.1*"/>
                        <ColumnDefinition Width="0.2*"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Text="Level" />
                    <Border Grid.Column="1">
                        <TextBlock Text="Command" />
                    </Border>
                    <Border  Grid.Column="2">
                        <TextBlock Text="Args" />
                    </Border>
                    <Border Grid.Column="3">
                        <TextBlock Grid.Column="3" Text="Status" />
                    </Border>
                </Grid>
            </Border>
        </StackPanel>

        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False">
                <Setter TargetName="HeadersTableBorder" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True">
                <Setter TargetName="GridBotLevelCommand" Property="Margin" Value="-15,0,0,0" />
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>


    <HierarchicalDataTemplate DataType="{x:Type tCommand:BotCommand}">
        <Grid Width="{Binding WidthGrid, Source={StaticResource LengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0.2*"/>
                <ColumnDefinition Width="0.8*"/>
                <ColumnDefinition Width="0.1*"/>
                <ColumnDefinition Width="0.2*"/>
            </Grid.ColumnDefinitions>
            <Grid.Resources>
                <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
                    <Setter Property="TextWrapping" Value="WrapWithOverflow" />
                    <Setter Property="Margin" Value="2,4" />
                </Style>
                <Style TargetType="Border" BasedOn="{StaticResource BorderStyleCommandGrid}" />
            </Grid.Resources>

            <TextBlock Text="{Binding NameOfLevel}"/>
            <Border Grid.Column="1">
                <TextBlock Text="{Binding ExampleCommand}" Margin="5,2,2,2" />
            </Border>
            <Border Grid.Column="2">
                <Grid>
                    <!-- Center alligment by right side of number -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="0.6*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="{Binding CountArgsCommand}" TextAlignment="Right"/>
                </Grid>
            </Border>
            <Border Grid.Column="3">
                <TextBlock Text="{Binding StatusUser}" Margin="5,2,2,2" />
            </Border>
        </Grid>
    </HierarchicalDataTemplate>


    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="21"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <themes:LeftMarginMultiplierConverter x:Key="LengthConverter" />
                    </ControlTemplate.Resources>
                    <StackPanel>
                        <Border Name="Bd"
                                    Background="{TemplateBinding Background}"
                                    Padding="{TemplateBinding Padding}">
                            <Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="15"/>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander" 
                                              Grid.Column="0"
                                              Style="{DynamicResource TreeViewToggleButtonStyle}"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              ClickMode="Press"/>

                                <ContentPresenter x:Name="PART_Header" 
                                                  Grid.Column="1"
                                                  ContentSource="Header"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                        <!--<Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource ForegroundColor}"/>
                                <Setter TargetName="Bd" Property="BorderThickness" Value="1"/>
                                <Setter TargetName="Bd" Property="Margin" Value="-1"/>
                                <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" SourceName="Bd" Value="true"/>
                                    <Condition Property="IsSelected" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource OrangeColor}"/>
                                <Setter TargetName="Bd" Property="BorderThickness" Value="1"/>
                                <Setter TargetName="Bd" Property="Margin" Value="-1"/>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource BackgroundColor}"/>
                            </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="8"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path x:Name="trianglePath"
								      Grid.ColumnSpan="2" 
								      HorizontalAlignment="Left" 
								      Fill="{DynamicResource OrangeColor}" 
								      Stroke="{DynamicResource OrangeColor}" 
							          StrokeThickness="1" 
					        	      VerticalAlignment="Top" 
								      Data="M5,-0 L9,5 1,5 z" 
								      Height="4.5" 
								      Stretch="Fill" 
								      Width="8" 
								      RenderTransformOrigin="0.5,0.5" 
								      Margin="1,12,0,0">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="135"/>
                                        <TranslateTransform X="0.17819090885901012" Y="0.43019090885900946"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter Grid.Column="1" 
								                  HorizontalAlignment="Left" 
								                  Margin="4,0,0,0" 
								                  RecognizesAccessKey="True" 
								                  SnapsToDevicePixels="True" 
								                  VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Margin" TargetName="trianglePath" Value="-0.5,10,0,0"></Setter>
                            <Setter Property="RenderTransform" TargetName="trianglePath">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                        <TranslateTransform X="0.17819090885901012" Y="0.43019090885900946"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="trianglePath" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="trianglePath" Value="Transparent"/>
                            <Setter Property="Stroke" TargetName="trianglePath" Value="{DynamicResource OrangeColor}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="trianglePath" Value="{DynamicResource OrangeColor}"/>
                            <Setter Property="Stroke" TargetName="trianglePath" Value="{DynamicResource OrangeColor}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="trianglePath" Value="{DynamicResource GrayColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewITCommand" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border SnapsToDevicePixels="true">
                        <ScrollViewer Background="{TemplateBinding Background}"
                                          CanContentScroll="false" Focusable="false" 
                                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                                          Padding="{TemplateBinding Padding}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <!-- Header -->
                                <Border BorderThickness="0,0,0,0.3" 
                                            BorderBrush="{DynamicResource ForegroundColor}">
                                    <Grid Margin="{Binding DefaultMargin, Source={StaticResource LengthConverter}}" 
                                              Width="{Binding WidthGrid, Source={StaticResource LengthConverter}}"
                                              HorizontalAlignment="Left">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="0.2*"/>
                                            <ColumnDefinition Width="0.8*"/>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition Width="0.2*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.Resources>
                                            <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlockHeaderGridStyle}" />
                                            <Style TargetType="Border" BasedOn="{StaticResource BorderStyleCommandGrid}" />
                                        </Grid.Resources>

                                        <TextBlock Text="Level" />
                                        <Border Grid.Column="1">
                                            <TextBlock Text="Command" />
                                        </Border>
                                        <Border  Grid.Column="2">
                                            <TextBlock Text="Args" />
                                        </Border>
                                        <Border Grid.Column="3">
                                            <TextBlock Grid.Column="3" Text="Status" />
                                        </Border>
                                    </Grid>
                                </Border>
                                <!-- Items -->
                                <ItemsPresenter Grid.Row="1" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>